/************************
*Author:zhang xiao
*Date:2015-3-30
*************************/
#define _GNU_SOURCE
#include <string.h>

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <netdb.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <time.h>

#include <asm/byteorder.h>
#include <linux/netfilter.h>
#include <libnetfilter_queue/libnetfilter_queue.h>
#include <linux/ip.h>
#include <linux/tcp.h>
#include <errno.h>

#ifdef __LITTLE_ENDIAN
#define IPQUAD(addr) \
    ((unsigned char *)&addr)[0],                  \
    ((unsigned char *)&addr)[1],                \
    ((unsigned char *)&addr)[2],                \
    ((unsigned char *)&addr)[3]
#else
#define IPQUAD(addr)                            \
  ((unsigned char *)&addr)[3],                  \
    ((unsigned char *)&addr)[2],                \
    ((unsigned char *)&addr)[1],                \
    ((unsigned char *)&addr)[0]
#endif

#define MAXLEN 2048
int sockfd = 0;
int is_failure = 0;
int is_send = 1;

char hname[128];
struct hostent *hent;


void process_send_packet(unsigned char* pkt, int pkt_len){
    if(pkt_len > MAXLEN) pkt_len = MAXLEN;
    struct iphdr *ip = (struct iphdr*) pkt;
    struct tcphdr *tcph = (struct tcphdr*) (pkt + ip->ihl*4);

    unsigned char buf[MAXLEN + 10];
    u_int32_t sour_addr, dest_addr;
    unsigned char* nip_payload;

    sour_addr = ntoh(ip->saddr);
    dest_addr = ntoh(ip->daddr);
    struct sockaddr_in to;

    // copy ip header to new packet
    memcpy((void*)buf, (void*)pkt, (size_t)(ip->ihl*4));
    nip_payload = buf + ip->ihl*4;
    int i = 0;
    for(; i < sizeof(u_int32_t); i++){
        *nip_payload = *((unsigned char*)&sour_addr+i);
        nip_payload++;
    }
    for(i = 0; i < sizeof(u_int32_t); i++){
        *nip_payload = *((unsigned char*)&dest_addr+i);
        nip_payload++;
    }
    //copy tcp packet to new packet
    u_int32_t tcp_packet_len = pkt_len - ip->ihl*4;
    unsigned char* tcp_packet = pkt + ip->ihl*4;
    struct iphdr* nip = (struct iphdr*) buf;
    memcpy((void*)nip_payload, (void*)tcp_packet, (size_t)tcp_packet_len);

    //send packet
    u_int32_t npkt_len = pkt_len + sizeof(sour_addr) + sizeof(dest_addr);
    nip->check = 0;
    nip->tot_len = htons(npkt_len);
    to.sin_addr.s_addr = nip->daddr;
    to.sin_family = AF_INET;
    int r = sendto(sockfd, buf,npkt_len,0, (struce sockaddr *)&to, sizeof(to));
    if(r < 0){
        perror("sendto error");
    }
    fprintf(stderr, "send packet processed\n");

}

void process_receive_packet(unsigned char* pkt, int pkt_len, int id,struct nfq_q_handle* qh){
    struct iphdr *ip = (struct iphdr*) pkt;
    unsigned char* tcp_packet = pkt + ip->ihl*4 + 2*sizeof(u_int32_t);
    struct tcphdr* tcph = (struct tcphdr*)tcp_packet;
    unsigned char* ntcp_packet = pkt + ip->ihl*4;
    u_int32_t tcp_len = pkt_len - ip->ihl*4 - 2*sizeof(u_int32_t);
    memcpy((void*)ntcp_packet, (void*)tcp_packet,(size_t)tcp_len);
    ip->check = 0;
    u_int32_t pdata_len = pkt_len - 2*sizeof(u_int32_t);
    ip->tot_len = htons(pdata_len);

    int r = nfq_set_verdict(qh, id, NF_ACCEPT, (u_int32_t)pdata_len, pkt);


}

static int cb(struct nfq_q_handle* qh, struct nfgenmsg* nfmsg, struct nfq_data* nfa, void *data){
    u_int32_t id = 0;
    struct nfqnl_msg_packet_hdr* ph = nfqnl_get_msg_packet_hdr(nfa);
    unsigned char* pdata = NULL;
    int pdata_len;
    int i;
    if(ph)
        id = ntohl(ph->packet_id);

    if(!is_failure){
        return nfq_set_verdict(qh, id, NF_ACCEPT, 0 ,NULL);
    }



    pdata_len = nfg_get_payload(nfa, (unsigned char**)&pdata);
    if(pdata_len == -1){
        pdata_len = 0;
    }

    struct iphdr* iphdrp = (struct iphdr*)pdata;

    #ifdef DEBUG
    fprintf(stderr,"len %d iphdr %d %u.%u.%u.%u ->",
    	pdata_len,
        iphdrp->ihl<<2,
        IPQUAD(iphdrp->saddr));
  	fprintf(stderr," %u.%u.%u.%u",
        IPQUAD(iphdrp->daddr));
  	fprintf(stderr,"\n");
    #endif

    //***********determine whether the packet is sent or received**********
    for(i = 0; hent->h_addr_list[i]; i++){
        struct in_addr* hostaddr = (struct in_addr*)(hent->h_addr_list[i]);
        if((u_int32_t)hostaddr->s_addr == (u_int32_t)iphdrp->saddr){
            is_send = 1;
            break;
        }
        else if((u_int32_t)hostaddr->s_addr == (u_int32_t)iphdrp->daddr){
            is_send = 0;
            break;
        }
    }
    //*********************************************************************
    if(is_send){
        process_send_packet(pdata,pdata_len);
        int r = nfq_set_verdict(qh, id, NF_DROP, (u_int32_t)pdata_len, pdata);
    }
    else{
        process_receive_packet(pdata, pdata_len, id, qh);
    }


    return 0;


}

int main(int argc, char** argc){
    struct nfq_handle* h;
    struct nfq_q_handle* qh;
    struct nfnl_handle *nh;
    int fd;
    int rv;
    char buf[4096];
    int i;
    gethostname(hname, sizeof(hname));

    hent = gethostbyname(hname);

    #ifdef DEBUG
    printf("hostname: %s\n address list: " hent->h_name);
    for(i = 0; hent->h_addr_list[i]; i++){
        printf("%s/t", inet_ntoa(*(struct in_addr*)(hent->h_addr_list[i])))
    }
    #endif


    h = nfq_open();
    if(!h){
        exit(1);
    }
    if(nfq_unbind_pf(h,AF_INET) < 0){
        fprintf(stderr, "error during nfq_unbind_pf()\n");
        exit(1);
    }
    if(nfq_bind_pf(h,AF_INET) < 0){
        fprintf(stderr, "error during nfq_bind_pf()\n");
    }

    printf("open raw socket\n");
    if((sockfd = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0){
        perror("create error");
        exit(1);
    }
    const int on = 1;
    if(setsockopt(sockfd,IPPROTO_IP,IPHDRINCL, &on,sizeof(on))){
        perror("set IP_HDRINCL failed");
        exit(1);
    }

    qh = nfq_create_queue(h, 0, &cb, NULL);
    if(!qh){
        exit(1);
    }
    if(nfq_set_mode(qh, NFQNL_COPY_PACKET, 0xffff) < 0){
        exit(1);
    }

    fd = nfq_fd(h);
    while(1){
        rv = recv(fd, buf, sizeof(buf), 0);
        if(rv > 0)
            nfq_handle_packet(h, buf,rv);
        else{
            fprintf(stderr, "recv got %d, errno = %d\n",rv, errno);
            break;
        }
    }
    nfq_destroy_queue(qh);
    nfq_close(h);
    exit(0);
}
